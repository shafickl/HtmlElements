
// the div

<div draggable="true" id="mySlideDiv" style="
     display: inline-flex;
    transition: transform 0.2s ease;
    flex-direction: row;
">
    <div draggable="false" style="
    width: 100%;
    min-width: 100%;
    max-width: 400px;
    padding: 10px;
">
        <img draggable="false" src="https://next.travailcleaningservices.com/wp-content/uploads/2023/08/R-2023-08-25T092826.244-e1692945360855.jpg" style="
    border-radius: 20px;
">
    </div>
<div draggable="false" style="
    width: 100%;
    min-width: 100%;
    max-width: 400px;
    padding: 10px;
">
        <img draggable="false"  src="https://next.travailcleaningservices.com/wp-content/uploads/2023/08/170201-moon-lunar_eclipse-moonlight-star-full_moon-x750.jpg" style="
    border-radius: 20px;
">
    </div><div draggable="false"  style="
    width: 100%;
    min-width: 100%;
    max-width: 400px;
    padding: 10px;
">
        <img draggable="false" src="https://next.travailcleaningservices.com/wp-content/uploads/2023/08/moon-mqcx9pq0fg2ma4lp.jpg" style="
    border-radius: 20px;
">
    </div><div draggable="false"  style="
    width: 100%;
    min-width: 100%;
    max-width: 400px;
    padding: 10px;
">
        <img draggable="false" src="https://next.travailcleaningservices.com/wp-content/uploads/2023/08/R-2023-08-25T092826.244-e1692945360855.jpg" style="
    border-radius: 20px;
">
    </div></div>


// the js code
<script>
sdlideElement("mySlideDiv", 4, 100);

function sdlideElement(elementID, childCount, percentage) {
var cp = 0;
const swipeContent = document.getElementById(elementID);
let swipeDirection = "none";
let startX = 0;
let currentTranslateX = 0;
var MX = 0; var MY = 0;
var pMouse = 0;

swipeContent.addEventListener('dragstart', (e) => {
const elementRect = swipeContent.getBoundingClientRect();
const mouseX = event.clientX - elementRect.left;
const mouseY = event.clientY - elementRect.top;
  console.log("Mouse X:", mouseX);
  
MX = mouseX; 
MY = mouseY;
        startX = e.clientX;
        currentTranslateX = parseFloat(window.getComputedStyle(swipeContent).getPropertyValue('transform').split(',')[4]); 
    });

    swipeContent.addEventListener('drag', (e) => {
        const touchX = e.clientX;
        const deltaX = touchX - startX;

        
        if (deltaX > 0) {
            nxt = 0;
swipeDirection = "left";

            if (cp >= nxt) { 
                console.log(cp);
  
            } else {
                swipeContent.style.transform = `translateX(${currentTranslateX + deltaX}px)`;                
            }
        } else if (deltaX < 0) {
console.log("Previous : ",swipeDirection);

if(swipeDirection == "left"){ swipeDirection = "right";}else{
swipeDirection = "right moving now ";
nxt = percentage * childCount - percentage;
if(cp <= -(nxt) ){

 
}else {
if(!currentTranslateX){ currentTranslateX = 0;}
swipeContent.style.transform = `translateX(${currentTranslateX + deltaX}px)`;         
}  }
        }
console.log(swipeDirection);
    });

    swipeContent.addEventListener('dragend', (e) => {
        const touchXk = e.clientX; 
        const deltaX = touchXk - startX;
pMouse = touchXk;
        const containerWidth = swipeContent.offsetWidth; 
        const swipePercentage = (deltaX / containerWidth) * 100;console.log(swipePercentage);

        let swipeDirection = "left";
       if(deltaX > 0){ 

console.log("Moving Left"); console.log(cp);
if (cp > 0) { 
            cp = cp + percentage;
            nxt = percentage * childCount - percentage;
            if (cp >= 0) {
                swipeContent.style.transform = `translate3d(0%,0,0)`;
            } else if (cp <= -(nxt)) { 
                cp = -(nxt) + percentage;
                swipeContent.style.transform = `translate3d(${cp}%,0,0)`;
            } else {
                swipeContent.style.transform = `translate3d(${cp}%,0,0)`;
            }
            swipeDirection = "left";
        }

else{

console.log("Here");
cp = cp + percentage;
nxt = percentage * childCount - percentage;
 pcp = cp - percentage;            
if(pcp == 0){
swipeContent.style.transform = `translate3d(0%,0,0)`;
}else if(cp <= -(nxt)) {
var uy = -(nxt) + percentage;
cp = uy;
                swipeContent.style.transform = `translate3d(${uy}%,0,0)`;
            }else{
swipeContent.style.transform = `translate3d(${cp}%,0,0)`;
}
}
}else if(deltaX < 0){ 
          console.log("Moving right");
           cp = cp - percentage;
            nxt = percentage * childCount - percentage;
            if (cp <= -(nxt)) {
                swipeContent.style.transform = `translate3d(${-nxt}%,0,0)`;
            } else if (cp >= 0) {
                cp = -(percentage);
                swipeContent.style.transform = `translate3d(-${percentage}%,0,0)`;
            } else {
                swipeDirection = "right";
                swipeContent.style.transform = `translate3d(${cp}%,0,0)`;
            }
        
}
        swipeContent.style.transition = 'transform 0.2s ease';

        setTimeout(() => {
            swipeContent.style.transition = '';
        }, 200);

    });



















swipeContent.addEventListener('touchstart', (e) => {
    startX = e.touches[0].clientX;
    currentTranslateX = parseFloat(window.getComputedStyle(swipeContent).getPropertyValue('transform').split(',')[4]);
});

swipeContent.addEventListener('touchmove', (e) => {
    const touchX = e.touches[0].clientX;
    const deltaX = touchX - startX;
   
    
 let swipeDirection = "left";
    if (deltaX > 0) {

nxt = 0;

if(cp >= nxt ){
 return false;
}else{
swipeContent.style.transform = `translateX(${currentTranslateX + deltaX}px)`;
        swipeDirection = "left"; 
}

  
    } else if (deltaX < 0) {

nxt = percentage * childCount - percentage;

if(cp <= -(nxt) ){

 
}else{

 swipeDirection = "right";
   swipeContent.style.transform = `translateX(${currentTranslateX + deltaX}px)`;
}
    }
});

swipeContent.addEventListener('touchend', (e) => {
    const touchX = e.changedTouches[0].clientX;
    const deltaX = touchX - startX;

    const containerWidth = swipeContent.offsetWidth;
    const swipePercentage = (deltaX / containerWidth) * 100;

    let swipeDirection = "left";
    if (deltaX > 0) {
cp = cp + percentage;
nxt = percentage * childCount - percentage;
if(cp >= 0 ){
swipeContent.style.transform = "translate3d(".concat("0").concat("%,0,0)");
}else if(cp <= -(nxt)){
cp = -(nxt) + percentage;
swipeContent.style.transform = "translate3d(".concat((cp)).concat("%,0,0)");
}else{
swipeContent.style.transform = "translate3d(".concat(cp).concat("%,0,0)");
  }
        swipeDirection = "left"; 
    } else if (deltaX < 0) {
cp = cp - percentage; 
nxt = percentage * childCount - percentage; 
if(cp <= -(nxt)){

swipeContent.style.transform = "translate3d(".concat(-(nxt)).concat("%,0,0)");
}else if(cp >= 0){

cp = -(percentage);
swipeContent.style.transform = "translate3d(-".concat(percentage).concat("%,0,0)");
}else{ 
swipeDirection = "right";
swipeContent.style.transform = "translate3d(".concat(cp).concat("%,0,0)");
   }
    }
//swipePercentage.toFixed(2)
    
    swipeContent.style.transition = 'transform 0.2s ease';
   // swipeContent.style.transform = `translateX(${currentTranslateX}px)`;

    setTimeout(() => {
        swipeContent.style.transition = '';
    }, 200);
});
}
</script>
